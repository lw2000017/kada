import requests
import time
s = requests.session()
import json

global cookieDict
cookieDict = {}

def getTimeStamp():

    t = time.time()
    nowTime = int(round(t * 1000))
    timeStamp = str(nowTime)
    return timeStamp

def refreshToken():

    headers = {'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)', 'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1",
               'Cookie': "Hm_lvt_e78ff38557cf56b9dd1487bbc60d06d5=1526526790; UM_distinctid=1636c15beb528f-0e260b9eeec5ee-704c175a-4a640-1636c15beb614b"}
    url = "http:///kada.ngrok.kittygo.cn/refreshToken.json?clientSecretText=1ebd198a3d7af6c64f3ba4bc6ae9cdd%3B3ac9c3e206f4a298d9049f9c42dbeaa0&deviceId=3ac9c3e206f4a298d9049f9c42dbeaa0"


    r = requests.get(url=url, verify=False, headers=headers)

    return r.cookies

def cookie_change_dict(_hhdd_):

    hhdd_dict = _hhdd_.strip('""').strip('{}')

    hhdd = hhdd_dict.split(",")

    print(hhdd)


    hhdd_dict = {}

    for i in range(len(hhdd)):
        str1 = hhdd[i]
        str_num = str1.split(":")
        key = str_num[0]
        # if key != 'token':
        #     valuse = str_num[1]
        #     if valuse == 'null':
        #         valuse = None
        #     elif valuse == 'true':
        #         valuse = True
        #     elif valuse == 'false':
        #         valuse = False
        #     else:
        #         valuse = int(valuse)
        # else:
        valuse = str_num[1]


        hhdd_dict[key] = valuse

    hhdd = str(hhdd_dict)
    print("hhdd-------", hhdd)
    # hhdd = hhdd.strip('{}')
    hhdd = hhdd.replace(' ', '')
    print("hhdd-------", hhdd)
    hhdd = hhdd.replace("'", '"')
    # hhdd = hhdd.replace('"', '\"')
    hhdd = '\"' + hhdd + '\"'

    print("hhdd-------", hhdd)
    return hhdd



def getCookie(_hhdd_):

    hhdd_dict = _hhdd_.strip('""').strip('{}')

    hhdd = hhdd_dict.split(",")

    print(hhdd)


    hhdd_dict = {}

    for i in range(len(hhdd)):
        str1 = hhdd[i]
        str_num = str1.split(":")
        key = str_num[0]
        valuse = str_num[1]
        hhdd_dict[key] = valuse

    return hhdd_dict


def login(loginName, htt):

    # htt = "http://10.0.10.61"
    htt1 = "http://kada.ngrok.kittygo.cn"

    payload = {'deviceId': '6c8c01b8-766c-33e9-b2a5-915bccebe8ae', 'loginName': loginName, 'password': 'KKgsp3f3bKeXY8KiAWckTw=='}
    headers = {'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)', 'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1"}
    url = htt1 + "/user/login.json"
    r = requests.post(url=url, headers=headers, data=payload)
    print('login-------------------------------------------')
    print(r.cookies)
    print(r.cookies['_HHDD_'])
    print(r.status_code)
    print(r.text)
    print('--------------------------------------------')

    return r.cookies['_HHDD_']

# 手机绑定前置接口
def validatePhone(hhdd_dict, phone, deviceId, code, htt):

    # htt = "http://10.0.10.61"
    htt1 = "http://kada.ngrok.kittygo.cn"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']
    JSESSIONID = hhdd_dict['JSESSIONID']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + \
                  token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\";" + "JSESSIONID=" + JSESSIONID

    url = htt + "/user/validatePhone.json"

    payload = {'phone': phone, 'deviceId': deviceId, 'code': code, 'password': 'KKgsp3f3bKeXY8KiAWckTw=='}


    headers = {
        'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
        'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1",
        'Cookie': cookie_hhdd
    }

    r = requests.get(url=url, headers=headers, params=payload)
    print("validatePhone------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")

# 绑定接口 输入主userid
def doUnify(userid, htt):

    # htt = "http://10.0.10.61"
    htt1 = "http://kada.ngrok.kittygo.cn"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']
    JSESSIONID = hhdd_dict['JSESSIONID']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + \
                  token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\";" + "JSESSIONID=" + JSESSIONID

    # cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + \
    #               token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""

    url = htt + "/user/doUnify.json"

    payload = {'userId': userid}

    headers = {
        'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
        'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1",
        'Cookie': cookie_hhdd
    }

    r = requests.get(url=url, headers=headers, params=payload)
    print("doUnify------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")



# 微信绑定前置接口
# String appid
# String code
# String deviceId 设备唯一标识

def validateWechat(hhdd_dict, htt,  appid, code, deviceId):

    # htt = "http://10.0.10.61"
    htt1 = "http://kada.ngrok.kittygo.cn"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""

    url = htt + "/user/validateWechat.json"

    payload = {'appid': appid, 'code': code, 'deviceId': deviceId}

    headers = {
        'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
        'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1",
        'Cookie': cookie_hhdd
    }

    r = requests.get(url=url, headers=headers, params=payload)
    print("validateWechat------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")
    return r.cookies['JSESSIONID']

# 获取短信验证码接口
def SMSCode(phoneNumber, intent, htt):

    # htt = "http://10.0.10.61"
    htt1 = "http://kada.ngrok.kittygo.cn"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" +\
                  token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""


    url = htt + "/verifyCode/SMSCode.json"

    payload = {'phoneNumber': phoneNumber, 'intent': intent}

    headers = {
        'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
        'rdi': "DT=iPhone7,1;SV=11.3;AV=3.6.0.1",
        'Cookie': cookie_hhdd
    }

    r = requests.get(url=url, headers=headers, params=payload)
    print("SMScode------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print(r.cookies['JSESSIONID'])
    print("-------------------------------------------------")
    return r.cookies['JSESSIONID']


def getBook2List(hhdd_dict, htt):

    # htt = "http://10.0.10.61"
    htt1 = "http://pre2.service.hhdd.com"
    # htt1 = "http://kada.ngrok.kittygo.cn"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""

    url = htt + "/subscribe/getBook2List.json"

    payload = {'pagingNumber': '1', 'pagingSize': '20000'}

    headers = {
        'user-agent': 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
        'rdi': "DT=iPhone7,1;SV=11.3;AV=3.7.0.1",
    'Cookie': cookie_hhdd
    }

    r = requests.get(url=url, headers=headers, params=payload)
    print("getBook2List------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")


def popup(isNew, hhdd_dict, htt):
    # 预发布环境
    # htt = "http://pre2.service.hhdd.com"
    # 测试环境
    # htt = "http://10.0.10.63:28080"
    url = htt + "/conf/popup.json"
    payload = {'isNew': isNew}

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""

    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.3;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers, params=payload)
    print("popup------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")

# ios 打分开关
# 获取是否打开开关接口
def Get_Client_Config(hhdd_dict, htt):
    # 测试环境
    # htt = "http://10.0.10.63:28080"
    # 预发布环境
    # htt = "http://pre2.service.hhdd.com"
    url = htt + "/config/getClientConfig.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.1;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers)
    print("Get_Client_Config------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")


# 获取用户创建时间
def Get_User_Detail(hhdd_dict, htt):

    # htt = "http://10.0.10.63:28080"
    # htt = "http://pre2.service.hhdd.com"
    url = htt + "/user/getUserDetail.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.1;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers)
    print("Get_User_Detail------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")


def get_Login_Type(hhdd_dict, htt):

    # htt = "http://10.0.10.63:28080"
    url = htt + "/user/getLoginType.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    deviceId = '03dc153f-e1d1-33df-9d31-587fa85f4d48'

    payload = {'deviceId': deviceId}

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.1;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers, params=payload)
    print("get_Login_Type------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")


def get_Story2_List(hhdd_dict, htt):

    # htt = "http://10.0.10.63:28080"
    # htt = "http://pre2.service.hhdd.com"
    url = htt + "/subscribe/getStory2List.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    pagingNumber = 1
    pagingSize = 10000
    # sourceId = 22328
    # sourceId =

    payload = {'pagingNumber': pagingNumber, 'pagingSize' : pagingSize}

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.3;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers, params=payload)
    print("get_Login_Type------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")
    a_dict = r.json()
    with open('data.json', 'w') as json_file:
        json.dump(a_dict, json_file, ensure_ascii = False, indent=4)




def unsubscribe(hhdd_dict, htt):

    # htt = "http://pre2.service.hhdd.com"
    # htt = ""
    url = htt + "/subscribe/unsubscribe.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    sourceType = 2
    sourceIdStr = '20196, 21901, 26332, 20209, 21678'

    payload = {'sourceType': sourceType, 'sourceIdStr' : sourceIdStr}

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.3;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers, params=payload)
    print("get_Login_Type------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")
    a_dict = r.json()
    with open('data.json', 'w') as json_file:
        json.dump(a_dict, json_file, ensure_ascii = False, indent=4)


def get_Client_Config(hhdd_dict, htt):

    # htt = "http://10.0.10.63:28080"
    url = htt + "/config/getClientConfig.json"

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.6;CH=debugpackage",
        'Cookie': cookie_hhdd
    }
    r = requests.get(url=url, headers=headers)
    print("get_Client_Config------------------------------------")
    print(r.url)
    print(r.cookies)
    print(r.request.headers)
    print(r.status_code)
    print(r.text)
    print("-------------------------------------------------")
    a_dict = r.json()
    with open('data.json', 'w') as json_file:
        json.dump(a_dict, json_file, ensure_ascii = False, indent=4)


def Get_Book_List(hhdd_dict, htt):

    # htt = "http://10.0.10.61"
    # htt = "http://pre2.service.hhdd.com"
    # url_book_1 = htt + "/subscribe/getBook2List.json"
    url_book_n = htt + "/book2/otherCollectList.json"

    # url_story_1 = htt + "/story2/getStoryList.json"
    url_story_n = htt + "/story2/getStoryList.json"

    # 随便看看 绘本 第一页数据
    list_sourceId = []
    dict_souceId = {}
    dict_souceId_number = {}
    list_sourceId_old = [50040, 50044, 50046, 50047, 50049, 50050, 50064, 50066, 50071, 50073, 50076, 50079, 50088, 50092, 50094, 50099,
     50103, 50106, 50107, 50108, 50115, 50121, 50129, 50130, 50133, 50137, 50140, 50142, 50144, 50146, 50345, 50348,
     50352, 50354, 50355, 50364, 50369, 50381, 50388, 50392, 50397, 50401, 50404, 50406, 50409, 50421, 50425, 50426,
     50433, 50435, 50436, 50441, 50442, 50455, 50458, 50459, 50460, 50461, 50463, 50474, 50486, 50489, 50500, 50501,
     50505, 50512, 50514, 50515, 50517, 50518, 50520, 50522, 50524, 50526, 50528, 50529, 50535, 50536, 50537, 50539,
     50541, 50543, 50544, 50549, 50550, 50561, 50562, 50565, 50567, 50569, 50570, 50571, 50573, 50575, 50576, 50578,
     50580, 50583, 50585, 50587, 50588, 50590, 50591, 50592, 50593, 50596, 50597, 50598, 50604, 50606, 50607, 50610,
     50611, 50613, 50614, 50616, 50619, 50620, 50622, 50624, 50627, 50629, 50630, 50631, 50633, 50635, 50638, 50639,
     50640, 50669, 50674, 50676, 50677, 50678, 50687, 50688, 50692, 50696, 50698, 50704, 50706, 50707, 50708, 50709,
     50710, 50711, 50713, 50714, 50716, 50717, 50718, 50720, 50721, 50723, 50726, 50727, 50728, 50729, 50730, 50731,
     50732, 50733, 50736, 50738, 50740, 50741, 50744, 50746, 50747, 50748, 50749, 50752, 50754, 50755, 50756, 50757,
     50758, 50762, 50766, 50767, 50769, 50772, 50773, 50778, 50779, 50781, 50782, 50783, 50787, 50788, 50794, 50797,
     50804, 50810, 50811, 50812, 50820, 50821, 50822, 50825, 50828, 50829, 50830, 50831, 50832, 50834, 50836, 50838,
     50841, 50844, 50845, 50847, 50849, 50850, 50851, 50852, 50853, 50854, 50855, 50856, 50857, 50859, 50860, 50862,
     50863, 50865, 50868, 50869, 50871, 50872, 50876, 50877, 50882, 50885, 50887, 50888, 50889, 50890, 50893, 50894,
     50895, 50896, 50904, 50905, 50908, 50909, 50915, 50916, 50917, 50920, 50921, 50924, 50926, 50927, 50929, 50933,
     50935, 50939, 50940, 50941, 50942, 50952, 50954, 50965, 50966, 50967, 50969, 50970, 50971, 50973, 50974, 50978,
     50981, 50986, 50988, 50991, 50995, 50997, 50999, 51006, 51009, 51010, 51011, 51012, 51013, 51015, 51024, 51025,
     51043, 51044, 51045, 51046, 51047, 51048, 51049, 51064, 51074, 51076, 51077, 51084, 51089, 51093, 51099, 51100,
     51101, 51102, 51103, 51104, 51105, 51106, 51111, 51114, 51115, 51116, 51119, 51141, 51144, 51152, 51154, 51159,
     51163, 51174, 51184, 51185, 51186, 50156, 51199, 51200, 51201, 51204, 51206, 51213, 51222, 51226, 51233, 51241,
     51242, 51244, 51245, 51249, 51254, 51255, 51256, 51259, 51272, 51276, 51277, 51278, 51291, 51337, 51348, 51351,
     51356, 51359, 51371, 51373, 51374, 51375, 51389, 51401, 51423, 51438, 51443, 51450, 51452, 51453, 51455, 51461,
     51464, 51466, 51468, 51473, 51490, 51491, 51515, 51518, 51541, 51551, 51566, 51567, 51573, 51575, 51588, 51599,
     51603, 51604, 51607, 51608, 51609, 51610, 51628, 51632, 51636, 51639, 51646, 51656, 51659, 51660, 51667, 51668,
     51669, 51689, 51706, 51709, 51711, 51762, 51763, 51773, 51775, 51777, 51778, 51780, 51781, 51791, 51802, 51805,
     51811, 51822, 51825, 51826, 51828, 51829, 51830, 51831, 51832, 51841, 51847, 51863, 51865, 51871, 51872, 51879,
     51880, 51893, 51895, 51911, 51913, 51915, 51923, 51927, 51931, 51941, 51943, 51945, 51946, 51948, 51950, 51952,
     51957, 51962, 51964, 51967, 51968, 51970, 51982, 51985, 51986, 51987, 51988, 51990, 51992, 51993, 51994, 51995,
     52023, 52024, 52025, 52026, 52027, 52028, 52031, 52061, 52062, 52063, 52064, 52068, 52073, 52075, 52083, 52093,
     52098, 52099, 52105, 52106, 52111, 52112, 52113, 52114, 52121, 52161, 52171, 52172, 52175, 52176, 52177, 52178,
     52179, 52183, 52186, 52187, 52195, 52197, 52201, 52203, 52204, 52207, 52214, 52222, 52231, 52235, 52242, 52243,
     52245, 52249, 52251, 52252, 52259, 52260, 52261, 52263, 52272, 52273, 52276, 52281, 52282, 52283, 52285, 52286,
     52287, 52291, 52292, 52293, 52294, 52295, 52296, 52297, 52299, 52302, 52303, 52304, 52305, 52306, 52307, 52308,
     52309, 52310, 52311, 52312, 52313, 52314, 52316, 52319, 52325, 52326, 52329, 52330, 52334, 52339, 52340, 52345,
     52383, 52384, 52391, 52407, 52410, 52411, 52543, 52545, 52554, 52666, 52743, 52761, 52771, 52773, 52776, 52801,
     52804, 52814, 52816, 52822, 52841, 52910, 52912, 52924, 52925, 52936, 52937, 52951, 52952, 52966, 52965, 52972,
     52973, 52974, 52981, 52983, 53002, 53031, 53057, 53061, 53079, 53092, 53118, 53151, 53162, 53166, 53178, 53211,
     53212, 53244, 53322, 53332, 53334, 53402, 53411, 53428, 53431, 53432, 53442, 53444, 53484, 53486, 53487, 53488,
     53491, 53511, 53512, 53522, 53527, 53528, 53533, 53542, 53543, 53550, 53553, 53556, 53557, 53561, 53562, 53572,
     53578, 53580, 53591, 53602, 53615, 53616, 53617, 53618, 53619, 53620, 53621, 53623, 53632, 53633, 53642, 53653,
     53655, 53656, 53657, 53660, 53661, 53663, 53668, 53669, 53683, 53702, 53711, 53712, 53713, 53715, 53716, 53717,
     53718, 53719, 53720, 53721, 53722, 53723, 53724, 53725, 53726, 53727, 53728, 53729, 53730, 53731, 53732, 53733,
     53734, 53735, 53736, 53737, 53738, 53739, 53740, 53741, 53742, 53743, 53744, 53745, 53746, 53747, 53748, 53749,
     53750, 53751, 53752, 53753, 53754, 53755, 53756, 53757, 53758, 53759, 53760, 53761, 53762, 53763, 53764, 53765,
     53766, 53767, 53768, 53769, 53770, 53771, 53772, 53773, 53774, 53775, 53776, 53777, 53778, 53779, 53780, 53781,
     53782, 53783, 53784, 53785, 53814, 53820, 53832, 53833, 53836, 53837, 53840, 53841, 53842, 53843, 53845, 53857,
     53860, 53861, 53871, 53872, 53873, 53874, 53875, 53876, 53877, 53878, 53881, 53882, 53886, 53888, 53891, 53962,
     53968, 53985, 53986, 54021, 54022, 54023, 54038, 54040, 54044, 54045, 54046, 54051, 54052, 54053, 54054, 54055,
     54056, 54057, 54058, 54060, 54081, 54084, 54123, 54129, 54130, 54135, 54136, 54139, 54140, 54164, 54165, 54167,
     54168, 54169, 54170, 54171, 54172, 54173, 54174, 54175, 54176, 54177, 54178, 54179, 54180, 54181, 54182, 54183,
     54184, 54250, 54251, 54285, 54341, 54353, 54354, 54357, 54358, 54371, 54381, 54395, 54397, 54415, 54420, 54421,
     54433, 54452, 54453, 54458, 54462, 54463, 54464, 54472, 54485, 54487, 54492, 54502, 54512, 54521, 54522, 54531,
     54532, 54533, 54541, 54542, 54545, 54546, 54547, 54553, 54557, 54559, 54581, 54603, 54637, 54638, 54639, 54640,
     54652, 54656, 54665, 54666, 54667, 54695, 54732, 54737, 54761, 54762, 54769, 54773, 54791, 54824, 54825, 54827,
     54828, 54829, 54830, 54832, 54833, 54871, 54872, 54873, 54875, 54881, 54882, 54883, 54887, 54890, 54891, 54903,
     54909, 54913, 54927, 54928, 54944, 54952, 54953, 54954, 54955, 54956, 54964, 54971, 54981, 54991, 55011, 55021,
     55022, 55031, 55041, 55052, 55061, 55062, 55063, 55064, 55065, 55066, 55067, 55068, 55069, 55070, 55071, 55072,
     55073, 55074, 55075, 55076, 55077, 55078, 55079, 55119, 55120, 55125, 55128, 55129, 55141, 55151, 55152, 55161,
     55185, 55186, 55192, 55193, 55196, 55198, 55199, 55200, 55202, 55203, 55204, 55205, 55207, 55208, 55213, 55214,
     55218, 55220, 60302, 60381, 55237, 55238, 55271, 55275, 55292, 55293, 55294, 55295, 55296, 55297, 55298, 55301,
     55311, 55315, 55321, 55322, 55341, 55342, 55344, 55345, 55346, 55347, 55371, 55381, 55401, 55402, 55404, 55405,
     55411, 55421, 55431, 55432, 55433, 55434, 55435, 55438, 55441, 55443, 55451, 55461, 55471, 55481, 55482, 55483,
     55485, 55493, 55502, 55505, 55506, 55513, 55514, 55515, 55516, 55517, 55518, 55519, 55520, 55521, 55522, 55523,
     55524, 55525, 55526, 55527, 55552, 55562, 55592, 60813, 60844, 60845, 60853, 60920, 61097, 61554, 61561, 61673,
     61701, 61719, 61747, 61854, 61967, 61969, 61978, 61981, 61982, 61984, 62072, 62135, 62341, 62461, 62462, 62463,
     62483, 62484, 62486, 62487, 62488, 62583, 62772, 62832, 64625, 64656, 60639, 50724, 51107, 51944, 52278, 53896,
     54572, 54573, 54574, 54575, 54576, 54577, 54578, 54579, 54580, 54617, 54618, 54619, 54620, 54621, 54622, 54623,
     54624, 54625, 54627, 54628, 54629, 54630, 54631, 54632, 50440, 50443, 51075, 51391, 51397, 51437, 51727, 52352,
     53242, 50615, 50737, 50786, 50798, 50814, 51381, 51489, 51533, 52921, 51148, 51265, 51511, 51579, 51623, 53170,
     53552, 50077, 50145, 50784, 51001, 51050, 51379, 51996, 52103, 52899, 52900, 52901, 52902, 55171, 50043, 51028,
     52324, 52658, 53464, 53576, 54326, 54409, 54902, 54908, 50840, 51574, 51772, 51901, 51991, 52395, 53409, 54138,
     51175, 51336, 51342, 51343, 51353, 51354, 51463, 51572, 51662, 51663, 51670, 50072, 50837, 50989, 51812, 52256,
     52866, 53283, 51470, 51471, 51474, 51476, 51611, 51612, 51613, 51615, 50082, 50444, 51848, 52827, 54766, 50398,
     52246, 53681, 51479, 51554, 52538, 54351, 60551, 50802, 51751, 52533, 53255, 50377, 50641, 50684, 51521, 51887,
     52250, 52453, 52792, 52882, 53157, 54904, 52861, 52868, 52869, 52870, 52926, 50052, 50759, 51644, 54926, 50934,
     51031, 52473, 52821, 53454, 50881, 50883, 50884, 50886, 50987, 51730, 51861, 51971, 52055, 52365, 50083, 50418,
     51485, 52192, 52451, 53951, 50128, 50347, 50866, 51393, 53485, 50132, 50361, 50372, 50382, 50795, 50800, 51086,
     51341, 51449, 51605, 51932, 52216, 53302, 53544, 50124, 50547, 50551, 50796, 51691, 51824, 51934, 52719, 53112,
     53173, 50998, 51087, 51088, 51269, 51416, 51564, 50036, 50938, 50979, 51098, 51984, 52652, 53055, 54037, 51280,
     51388, 51674, 52206, 52315, 52962, 50572, 52551, 53107, 54923, 50123, 50776, 51029, 51631, 51688, 52108, 53243,
     54831, 50070, 50931, 50985, 50992, 50993, 51007, 51052, 51053, 51418, 51645, 51899, 50623, 50636, 51262, 51480,
     51842, 51892, 51965, 52236, 52474, 50864, 52277, 52793, 53221, 53531, 53541, 53575, 54249, 53175, 53176, 53254,
     54025, 54026, 54031, 54032, 54481, 54482, 54483, 52893, 52904, 52913, 53028, 53029, 53652, 50065, 50109, 50774,
     50919, 51091, 51520, 51894, 51958, 52232, 52462, 53247, 50867, 50891, 52096, 52223, 52224, 52253, 52254, 52255,
     50511, 50775, 51147, 51678, 52087, 52109, 53622, 50111, 51867, 51889, 53179, 53218, 50147, 50428, 50513, 50839,
     51123, 52085, 52102, 50996, 51731, 52298, 52818, 55001, 52323, 52715, 52832, 53932, 51462, 50805, 51776, 52101,
     53201, 54721, 55507, 55508, 53905, 53906, 53911, 53912, 54017, 52905, 52906, 52907, 52908, 52909, 52911, 50652,
     50750, 52181, 52493, 52552, 52698, 52762, 53155, 53582, 53682, 54711, 50930, 51710, 51792, 53439, 53443, 50609,
     51234, 51655, 53102, 53103, 53105, 53106, 53135, 53404, 53441, 53577, 54912, 50051, 50815, 50846, 51037, 51616,
     51803, 52653, 52865, 53081, 53495, 53547, 55102, 50493, 50508, 50739, 51260, 50842, 50843, 51349, 51439, 53671,
     53023, 53024, 53025, 53026, 50485, 51094, 51386, 51602, 52731, 53558, 53559, 53601, 53603, 53604, 53684, 50922,
     50990, 52592, 52744, 51261, 51357, 51358, 51360, 51361, 51664, 51665, 51666, 51693, 51897, 51898, 52274, 52414,
     52944, 51350, 51085, 51271, 52100, 54655, 52455, 54383, 50671, 51532, 51643, 51935, 54601, 54548, 54549, 54550,
     54551, 54552, 54554, 54555, 54556, 54633, 54634, 54635, 54739, 54740, 54741, 54742, 54743, 54950, 53167, 53168,
     53169, 50413, 50414, 50415, 51246, 51332, 51465, 51695, 52053, 52714, 52863, 52864, 53011, 50879, 51097, 51658,
     52343, 50653, 53165, 50041, 50134, 50484, 50506, 50507, 51267, 51444, 51771, 51873, 52452, 52638, 54361, 52880,
     52881, 53093, 53113, 53114, 53115, 53116, 53117, 53120, 53319, 53323, 53324, 53335, 53336, 53371, 53384, 53393,
     53433, 53447, 50600, 50715, 50900, 52964, 53571, 53573, 53831, 53835, 53844, 53846, 53847, 55314, 50582, 50589,
     50595, 50694, 50699, 50712, 50719, 50911, 50950, 50951, 51209, 53838, 53839, 55312, 55361, 61093, 50370, 50371,
     50373, 50374, 50375, 50376, 50378, 50379, 50380, 50383, 50385, 50387, 50389, 50391, 50394, 50396, 50400, 50402,
     50403, 50405, 50407, 51651, 51652, 51683, 51752, 51692, 50117, 50492, 50499, 50760, 51002, 51301, 51477, 51827,
     52188, 53202, 53989, 54765, 54768, 55209, 50390, 50785, 50538, 52692, 54133, 54137, 50411, 50878, 51000, 52361,
     52472, 53574, 50817, 52074, 52982, 52984, 53462, 51512, 51891, 52180, 52532, 53219, 53482, 54611, 54612, 54613,
     54614, 50063, 50122, 50125, 50968, 51003, 51704, 51247, 51250, 51251, 51252, 51257, 51266, 51270, 51333, 51385,
     51424, 51425, 51436, 51475, 51569, 51586, 51875, 51933, 52032, 52041, 52051, 52052, 52072, 52095, 52217, 53052,
     53053, 53054, 53532, 51998, 51999, 52205, 52432, 52718, 50437, 50439, 50809, 50813, 51629, 51696, 51697, 51700,
     51726, 50095, 51843, 52001, 52289, 53321, 53614, 55219, 50608, 50827, 51469, 51614, 51617, 51637, 51113, 52097,
     51821, 52673, 50584, 50586, 50594, 50603, 50702, 50901, 50913, 50947, 50948, 50960, 50963, 51014, 51016, 51017,
     51018, 51020, 51021, 51022, 51023, 51124, 51128, 51129, 51130, 51131, 51132, 51133, 51134, 51135, 51156, 51157,
     51158, 51160, 51164, 51165, 51168, 51191, 51192, 51194, 51197, 51202, 51203, 50599, 50602, 50700, 50701, 50705,
     50897, 50898, 50899, 50906, 50907, 50943, 50944, 50945, 50946, 50949, 50955, 50956, 50957, 50958, 50959, 50961,
     51125, 51126, 51127, 51166, 51167, 51193, 51195, 51196, 51198, 51208, 50346, 50384, 51264, 52696, 52697, 52702,
     52707, 52708, 52987, 50510, 50743, 50932, 51851, 52381, 52392, 52732, 52733, 52741, 52805, 53271, 53272, 53273,
     53274, 53685, 53154, 53156, 53160, 53161, 53293, 53303, 53312, 53313, 53314, 53483, 51347, 51390, 51411, 51467,
     51626, 51647, 51648, 51026, 51027, 51030, 51032, 51033, 51034, 51035, 51036, 51040, 51041, 51263, 50102, 50655,
     51596, 51283, 51482, 51483, 50067, 51092, 51223, 52116, 52903, 50494, 50495, 50496, 50497, 50467, 51120, 51121,
     51122, 51235, 51240, 51435, 51590, 51591, 51592, 51593, 51606, 52094, 52194, 50367, 51542, 51918, 52030, 52332,
     52341, 52486, 53027, 53281, 53612, 54910, 50502, 50525, 50568, 50649, 50682, 50771, 51420, 51650, 51722, 51850,
     51862, 52189, 52275, 52336, 52561, 52765, 52940, 52941, 54352, 50466, 50761, 50848, 51221, 51362, 51657, 51687,
     51698, 53534, 54041, 52120, 52409, 52539, 53818, 50033, 51395, 51983, 53993, 50119, 51112, 51117, 51118, 51585,
     52342, 52540, 54287, 54288, 54289, 54892, 54893, 54894, 50081, 51149, 51844, 51922, 51960, 53551, 54440, 54441,
     54442, 54443, 54444, 54445, 54895, 54896, 54897, 55130, 55263, 55264, 54493, 54494, 54495, 54496, 54497, 54498,
     50344, 50351, 51140, 51142, 51143, 51150, 51236, 51456, 51457, 51565, 51620, 51916, 52664, 53171, 53172, 53489,
     53579, 53611, 50353, 51232, 51919, 51963, 51881, 51882, 51883, 51884, 51885, 51890, 50045, 51966, 51981, 52333,
     53133, 53134, 54888, 50408, 50434, 50438, 50552, 50553, 50799, 51806, 51849, 52362, 50096, 50722, 51231, 53427,
     51211, 51212, 51214, 51215, 51216, 51217, 51218, 51225, 51227, 51228, 51229, 53315, 53316, 53317, 53325, 53386,
     53434, 53435, 53468, 53469, 50464, 50465, 50563, 50564, 51005, 51728, 51878, 50656, 52233, 53437, 53539, 50657,
     52782, 52976, 53667, 50032, 50546, 54901, 61130, 60907, 53889, 50617, 51823, 52284, 52817, 52879, 52929, 52930,
     52931, 52967, 52968, 50780, 51516, 51654, 51924, 50356, 50357, 50359, 50360, 50362, 50363, 50365, 50366, 50368,
     50685, 50686, 50880, 51732, 52262, 53703, 53365, 53401, 53403, 53436, 53438, 53440, 53445, 53446, 51641, 51684,
     53654, 50078, 51004, 51151, 51155, 51238, 51321, 51392, 51680, 50521, 50523, 50527, 50566, 51176, 51712, 52661,
     52975, 52977, 52978, 54390, 54672, 54680, 54298, 50753, 51187, 51580, 52401, 52402, 52550, 54911, 50650, 50662,
     51258, 52784, 50395, 52091, 52162, 52200, 53408, 53450, 53451, 53452, 53453, 53455, 53456, 53457, 53458, 53459,
     53460, 53461, 53463, 53465, 53466, 53467, 53535, 53536, 53537, 53538, 53540, 53947, 53948, 53949, 53950, 53971,
     53981, 53982, 53983, 53984, 53990, 53992, 53994, 53995, 53996, 53997, 53998, 53999, 54399, 54400, 54401, 54402,
     54405, 54406, 54417, 52431, 52471, 52481, 52482, 52484, 52485, 52492, 52531, 52534, 52535, 60277, 60282, 50789,
     50791, 51239, 52208, 52385, 50412, 50554, 52914, 53065, 53071, 53072, 53073, 53074, 53075, 53076, 53077, 53078,
     54396, 53662, 52665, 50416, 50417, 50419, 50420, 50423, 50424, 50427, 50429, 50801, 50803, 50806, 50807, 50808,
     50976, 51556, 51561, 51562, 51638, 51699, 51723, 51724, 50560, 50637, 51703, 51741, 51801, 52191, 52258, 52800,
     51322, 51331, 51399, 51400, 51563, 53021, 50818, 52483, 51484, 51601, 54571, 55051, 50545, 50659, 52413, 50075,
     51953, 53064, 55132, 55212, 50039, 50118, 51961, 50034, 50112, 50548, 51243, 51413, 51779, 52021, 52393, 52495,
     53121, 53406, 53560, 54437, 50350, 50734, 50735, 51387, 51412, 51445, 51649, 52382, 50658, 50660, 50661, 50663,
     50664, 50665, 50666, 50667, 50874, 50875, 53643, 60977, 50668, 50984, 52371, 53164, 53664, 54876, 60618, 50763,
     50918, 51442, 52118, 53658, 61044, 50085, 50097, 51095, 52081, 52544, 53220, 53245, 51597, 51690, 51900, 52054,
     52546, 52547, 52548, 52549, 52676, 51782, 54922, 51642, 60271, 60566, 61424, 54434, 54436, 54438, 54439, 55127,
     50892, 51355, 53694, 54702, 55211, 55216, 55217, 55492, 55494, 55495, 55496, 55497, 55547, 55548, 55549, 55550,
     55551, 55571, 55572, 55575, 55576, 55577, 60888, 60889, 60890, 60891, 60893, 50080, 52799, 55183, 50074, 50994,
     52565, 52717, 52871, 53526, 50430, 52694, 52695, 52700, 52701, 52703, 52985, 50410, 51517, 52215, 53549, 51441,
     51959, 52487, 54544, 52182, 52279, 53548, 50790, 51594, 51846, 51866, 51926, 51989, 52084, 52142, 52199, 52212,
     52593, 52671, 53082, 51108, 52494, 53665, 60333, 50393, 50672, 51929, 52537, 53174, 54764, 52322, 55201, 50873,
     51384, 51705, 51729, 51733, 52190, 52225, 51434, 51972, 52922, 52923, 61366, 50068, 51419, 51679, 53152, 53405,
     52396, 54626, 51414, 51877, 50089, 50457, 52029, 53407, 60819, 51774, 50399, 60477, 60868, 61079, 52751, 60992,
     50670, 50673, 50675, 50679, 50680, 50681, 50683, 51109, 51110, 51433, 51653, 51951, 51955, 52363, 52364, 52491,
     52763, 53282, 52742, 52764, 52884, 52885, 52886, 50765, 52781, 52942, 54731, 50154, 51145, 51146, 51153, 51205,
     51253, 51417, 51458, 51917, 50105, 53058, 53250, 53251, 53252, 53253, 55131, 54837, 60871, 60338, 53490, 53523,
     53524, 53613, 60653, 60681, 60685, 60689, 60694, 60696, 60697, 60698, 60699, 60700, 60701, 60702, 60703, 60704,
     60705, 60706, 60707, 60708, 60709, 60710, 60711, 61081, 54668, 54223, 60593, 51997, 53410, 54654, 54834, 54835,
     54836, 50084, 50386, 51378, 50651, 51096, 51598, 52767, 52988, 53203, 54763, 52441, 52454, 52461, 50349, 54356,
     55197, 50577, 50581, 50601, 50690, 50691, 50693, 50695, 50697, 50703, 50910, 50912, 50914, 50962, 50964, 51019,
     51161, 51162, 51207, 62680, 53581, 51237, 51555, 50136, 50764, 51486, 51701, 51942, 52011, 52132, 53062, 54166,
     54382, 54416, 55206, 60733, 52642, 52651, 52654, 52716, 52819, 52820, 52823, 52824, 52829, 52830, 52831, 52842,
     52851, 52852, 52853, 52854, 52867, 52872, 52943, 52567, 50540, 50745, 51380, 52963, 53131, 53248, 54039, 54435,
     60688, 54005, 54242, 54793, 60304, 60495, 61302, 50104, 51761, 52198, 54900, 52928, 54924, 50138, 51311]
    #
    # paging_size = 60
    # paging_number = 1
    #
    # payload = {'pagingSize': paging_size, 'pagingNumber': paging_number}

    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.3;CH=debugpackage",
        'Cookie': cookie_hhdd
    }

    # probation_plan_sourceId_list = [53159, 50081, 50104, 53157, 50723, 53155, 50625, 51416, 53293, 50067, 53161, 50156, 52120, 53154, 53302, 50125, 50103, 50105, 50070, 51003, 53664, 50834, 53482, 51088, 53156, 53483, 50075, 53303, 50998, 53160, 51269, 50097, 51455, 50146, 51087, 50626, 51276, 53667, 50726, 51564, 51259, 52024, 51997, 50623, 50119, 50074, 55132, 55151, 53162, 53623, 50624, 53485, 51311, 53179, 51239, 53549, 51301, 51029, 50994, 53243, 53332, 53121, 51249, 50789, 53665, 51684, 51477, 50107, 53151, 50501, 51037, 50109, 50043, 51967, 50138, 53133, 54926, 50145, 55152, 50096, 53131, 51032, 50065, 51034, 52249, 51337, 50406, 51844, 51350, 53313, 52805, 50083, 50633, 51812, 50839, 51438, 50995, 53134, 53178, 50100, 52741, 51243, 52832, 50099, 50763, 51849, 50033, 52314, 50853, 53314, 52203, 50776, 50112, 50616, 53661, 50136, 51594, 50795, 52323, 52731, 52733, 54581, 52732, 51030, 51555, 53119, 55199, 53490, 55200, 52591, 51112, 53111, 53092, 51113, 53558, 53112, 51681, 51783, 51974, 50047, 52593, 50128, 50850, 51925, 52923, 52567, 50892, 50073, 53559, 50399, 55205, 50115, 51380, 52536, 51710, 53528, 51920, 52187, 52259, 51825, 51679, 50036, 55128, 50500, 51721, 50689, 50790, 52553, 50147, 51642, 51512, 51971, 50650, 50649, 51731, 50870, 55197, 54927, 50983, 53601, 51323, 54928, 55203, 53428, 50651, 51233, 53244, 50579, 53409, 53152, 55204, 52922, 52586, 52587, 53246, 52114, 51972, 50605, 53407, 50982, 53408, 50615, 50751, 50515, 52287, 50048, 52081, 50420, 50895, 52027, 51242, 55202, 51434, 52544, 50102, 51678, 51921, 54711, 53534, 51986, 52552, 53410, 52585, 52565, 53669, 52028, 53682, 50407, 50843, 54601, 50377, 50359, 50974, 55311, 52083, 51988, 53487, 54640, 50068, 52361, 51258, 50388, 54991, 53553, 51231, 52551, 50416, 52493, 54900, 52413, 52548, 53242, 52410, 53580, 54356, 50606, 55021, 51209, 51916, 52283, 52494, 51667, 52885, 50349, 52097, 53334, 51437, 52549, 52967, 53102, 52235, 50076, 50672, 53684, 52412, 51727, 52642, 53105, 53681, 51774, 55471, 53091, 50038, 53271, 52109, 51118, 50064, 50443, 52722, 52543, 50728, 55120, 50085, 50886, 51074, 50685, 50864, 52800, 50356, 52884, 51865, 51926, 51110, 50051, 52116, 50444, 52814, 52881, 51205, 51442, 51585, 53176, 51561, 50803, 53603, 53551, 51629, 50077, 52352, 53002, 52084, 50999, 52205, 50679, 50984, 51397, 53613, 50357, 53113, 50370, 51791, 53702, 50088, 50044, 50740, 53106, 53252, 52886, 53604, 51449, 51400, 52363, 51830, 50553, 51954, 50375, 50387, 52701, 53488, 52322, 53411, 51142, 51379, 52882, 52371, 53120, 55131, 52541, 53614, 50769, 50855, 51875, 51652, 53818, 53658, 51960, 52742, 51440, 50140, 51588, 55371, 53116, 50683, 50785, 51782, 51725, 51000, 51267, 53219, 53245, 53220, 50762, 50362, 53671, 50671, 52963, 55207, 53174, 50391, 50371, 50883, 50394, 52252, 50953, 55315, 50363, 51156, 55301, 50878, 52961, 51752, 51846, 55402, 53027, 51436, 51107, 50930, 50931, 50675, 53532, 53254, 51724, 51918, 53013, 50673, 52495, 51959, 52909, 50397, 51462, 51150, 50382, 53175, 50707, 51353, 50367, 55342, 51699, 52696, 53218, 52702, 50916, 55079, 50117, 52298, 50378, 50543, 52664, 50662, 50634, 50765, 53611, 50374, 51847, 51001, 53117, 52055, 50353, 53522, 50440, 50899, 52721, 51146, 51683, 52970, 50130, 52540, 54981, 52929, 50052, 50591, 51456, 51234, 50405, 53489, 51644, 50365, 51963, 50423, 50464, 50050, 51985, 52062, 50922, 55431, 50398, 52883, 50668, 51723, 52392, 51889, 51333, 51751, 52969, 50879, 51651, 51696, 55438, 51984, 50670, 52393, 51923, 55346, 50801, 51556, 50881, 50809, 50808, 53114, 51439, 50664, 51955, 51091, 52542, 50389, 51843, 52262, 51700, 55461, 50836, 50424, 51433, 51049, 52186, 50786, 52871, 50667, 53273, 52703, 52385, 51109, 52592, 50547, 52315, 50665, 51861, 51811, 50585, 50686, 51957, 50412, 50806, 50722, 51349, 51108, 51378, 50066, 50718, 53581, 50684, 50361, 52707, 50372, 52695, 50379, 53840, 53058, 53576, 51638, 50046, 50807, 55451, 50636, 51653, 55443, 50380, 50502, 51893, 50976, 50390, 50800, 52962, 50987, 52011, 51414, 51917, 50970, 51391, 55218, 51596, 51732, 52414, 50360, 55209, 51620, 52491, 50427, 53556, 52764, 51951, 51388, 55125, 51664, 51255, 54354, 50813, 51098, 51891, 50154, 52908, 52763, 50744, 50063, 51117, 50439, 50897, 51515, 50681, 50403, 51253, 52246, 52162, 51143, 52198, 53486, 55196, 52365, 50906, 50351, 50385, 50805, 50344, 50842, 53093, 55435, 50680, 52911, 50660, 51322, 51565, 51763, 52817, 50429, 51778, 50658, 50437, 51878, 51458, 52274, 53832, 52182, 51236, 50706, 52986, 53255, 50527, 51945, 51968, 50996, 52199, 50542, 51726, 50346, 50400, 51484, 50721, 50084, 53552, 50393, 52256, 51775, 52827, 51360, 51247, 51781, 53612, 55344, 50548, 52831, 52021, 51444, 50122, 50123, 50417, 51697, 51662, 51877, 51341, 50880, 51254, 53491, 50499, 52487, 51628, 52407, 52212, 52743, 51982, 50384, 50497, 51899, 53662, 50495, 52937, 50838, 51384, 51425, 55404, 52293, 50875, 52907, 50802, 55192, 50663, 50659, 50419, 51562, 53021, 51958, 51351, 50739, 51574, 50366, 51948, 51264, 50514, 51802, 50466, 52866, 51704, 51193, 51953, 50963, 50137, 50489, 53841, 53054, 51691, 52933, 51347, 53495, 55220, 51270, 50546, 52799, 52715, 51017, 52032, 51464, 51848, 50072, 51569, 50657, 52023, 50743, 52333, 50430, 50376, 53842, 50582, 51741, 50496, 51792, 50587, 51658, 50538, 51480, 51395, 51608, 51361, 50494, 51965, 50682, 51261, 51964, 50493, 51601, 50563, 50884, 51348, 50536, 51801, 52282, 51123, 52671, 50108, 51730, 51140, 52951, 52638, 50782, 51381, 52905, 51412, 51761, 53533, 53062, 55341, 54901, 50540, 50418, 51387, 53272, 51692, 52208, 51336, 53547, 50507, 52930, 50474, 52872, 50350, 52091, 50383, 51637, 51262, 51991, 51981, 52250, 52570, 52382, 50560, 50595, 51944, 52251, 53253, 53053, 50592, 52275, 51690, 55381, 51648, 51566, 50904, 51263, 51950, 51096, 55432, 52364, 52762, 51470, 51012, 52142, 50578, 53103, 52771, 51880, 51551, 53833, 50986, 51106, 50661, 52231, 51927, 52865, 50411, 51272, 50702, 55421, 51779, 52206, 51331, 51483, 50373, 51251, 51649, 50594, 51204, 50989, 51277, 53560, 51563, 53571, 50413, 52654, 52852, 51097, 51362, 51467, 51894, 50948, 51962, 52830, 53211, 51443, 50771, 51417, 50905, 52108, 50735, 52319, 52345, 50396, 52258, 50485, 51616, 50545, 51693, 52676, 52074, 52001, 52326, 50583, 51983, 52191, 50637, 51687, 52223, 52273, 53055, 51085, 51611, 53251, 55206, 53574, 50734, 52342, 53170, 50438, 53406, 51929, 52966, 52864, 51851, 51626, 50935, 51665, 51343, 51196, 51047, 52869, 51646, 52201, 52277, 52403, 50604, 52931, 51703, 50492, 55441, 52879, 52853, 51636, 53575, 53115, 52279, 52854, 52172, 53063, 51722, 51966, 50912, 53202, 51532, 52381, 51572, 51473, 50690, 51491, 51435, 50506, 52761, 50577, 52861, 50484, 51002, 51773, 52697, 52325, 50041, 53011, 50121, 51126, 52118, 51623, 51518, 51246, 51016, 50111, 52868, 50442, 53834, 54909, 53082, 51712, 51095, 53685, 50551, 52051, 52880, 50856, 51701, 51603, 52204, 52673, 53250, 50523, 50414, 52926, 52716, 51392, 51148, 52661, 52932, 51659, 51728, 50874, 52411, 53572, 52900, 51159, 51149, 50666, 52391, 50641, 50784, 53703, 52255, 50979, 51931, 50714, 52106, 55433, 52384, 51094, 50080, 52217, 55161, 50368, 51044, 51827, 52936, 51468, 51121, 51780, 51122, 52131, 50386, 51591, 51999, 51643, 52243, 51654, 51911, 52404, 51866, 52554, 51590, 52054, 52179, 51632, 52286, 51474, 51883, 52550, 50745, 55361, 51579, 51052, 52052, 51598, 51471, 50603, 51198, 51842, 50764, 52829, 51420, 53172, 50508, 52031, 53531, 52064, 51411, 50513, 52906, 51705, 50132, 50124, 51354, 51776, 52547, 51573, 51145, 50947, 55322, 52087, 51007, 51418, 51399, 50799, 52095, 51153, 50566, 50760, 52295, 51657, 55219, 52658, 50958, 53052, 51120, 51542, 52974, 50861, 51266, 52719, 51998, 51892, 51777, 53622, 51709, 52486, 52409, 50521, 55314, 51771, 52942, 51245, 52053, 51863, 50564, 52692, 54285, 50525, 52316, 51250, 50761, 54910, 51666, 50840, 50134, 52718, 53657, 51729, 53171, 51424, 51469, 55312, 51924, 50992, 52744, 52324, 50710, 51592, 51823, 51615, 52094, 51935, 52072, 52698, 53274, 50609, 50911, 52965, 54361, 50032, 51826, 52030, 52183, 52700, 50985, 50692, 52096, 51321, 50704, 52068, 50698, 52928, 51647, 52224, 51873, 51607, 50737, 51413, 51163, 52284, 51645, 52652, 51933, 51898, 52207, 50517, 53654, 51014, 53281, 51151, 55321, 50688, 51050, 50602, 51639, 52192, 52651, 52694, 53656, 51656, 50133, 51670, 51176, 50687, 52964, 51359, 51867, 52653, 53846, 52714, 53524, 50598, 55401, 50788, 52821, 51450, 51240, 52098, 50572, 50774, 52819, 52824, 51257, 50408, 50957, 52362, 52823, 50589, 51821, 50581, 53061, 51466, 51238, 51593, 52561, 51663, 53012, 51897, 52987, 52291, 52194, 50891, 50719, 52870, 50568, 52225, 51806, 51463, 50580, 51162, 50510, 50584, 53843, 53173, 50798, 52041, 53655, 51772, 50693, 51445, 52161, 50552, 51489, 51358, 50898, 50415, 51482, 50700, 52851, 51168, 51235, 50775, 52816, 52867, 51824, 50434, 54351, 51155, 50938, 51803, 52189, 50914, 51479, 52180, 51133, 50588, 51465, 55411, 53845, 53023, 54908, 51882, 52171, 51201, 51655, 52102, 51650, 50696, 51192, 52462, 51613, 51129, 50703, 50913, 51989, 52818, 51476, 51995, 52245, 51733, 51053, 50465, 51586, 51045, 52944, 52099, 50954, 53081, 51597, 51568, 52934, 52100, 50901, 52339, 51680, 52940, 51161, 50865, 51018, 52708, 50467, 53835, 52546, 51612, 50900, 53837, 50402, 51913, 51075, 52804, 53573, 50993, 52665, 51457, 52253, 52303, 51332, 52232, 52711, 50950, 50932, 51160, 50071, 50590, 50695, 51695, 50596, 51805, 53523, 53025, 52863, 50944, 55208, 53838, 51922, 50600, 53283, 50511, 51887, 53844, 53660, 52988, 51021, 53024, 51900, 51244, 53026, 53847, 51641, 50952, 51357, 50716, 52299, 50715, 54166, 54637, 61719, 51157, 52985, 53836, 51195, 51554, 51461, 50960, 52188, 50951, 51831, 52943, 50711, 51475, 53064, 50887, 52177, 51130, 52776, 50873, 50554, 50708, 51386, 52104, 52820, 52842, 51022, 53212, 52562, 50699, 50959, 51207, 52973, 50910, 51881, 50908, 53550, 51252, 52538, 50697, 50597, 51385, 50946, 52175, 50961, 50717, 50608, 51005, 52254, 51762, 51698, 50691, 52899, 51019, 52292, 55434, 50617, 55129, 51232, 50709, 52075, 51194, 51158, 52773, 50593, 50964, 51486, 52341, 51919, 52101, 50601, 51606, 53831, 52278, 50962, 51884, 51271, 51890, 52968, 53107, 50347, 50955, 50945, 51256, 51614, 50867, 53839, 51342, 51131, 51371, 50779, 50694, 52302, 52991, 51165, 51605, 51915, 52073, 51202, 52103, 51283, 55347, 50796, 51602, 50780, 52990, 50915, 51822, 52343, 53653, 51127, 51390, 51617, 51885, 53057, 50909, 50949, 52941, 51631, 51134, 52200, 52921, 55201, 51208, 54165, 50939, 52901, 50705, 51023, 50586, 52174, 52276, 50599, 52061, 52066, 51164, 53543, 51125, 52903, 51203, 50712, 50772, 50956, 50395, 51197, 55345, 51191, 52902, 51135, 52190, 52952, 50866, 53548, 50907, 51020, 52132, 51166, 51167, 53544, 51175, 50943, 50701, 51930, 51132, 51128, 51124, 63461, 62904, 50131, 51460]

    #
    probation_plan_sourceId_list = []




    n = 0
    paging_size = 60

    for paging_number in range (1, 12):
        payload = {'pagingSize': paging_size, 'pagingNumber': paging_number}
        r = requests.get(url=url_book_n, headers=headers, params=payload)
        a_dict = r.json()
        data_len = len(a_dict['data'])
        data_List = a_dict['data']
        list_sourceId = []

        for data in data_List:
            if data['type'] == 1:
                list_sourceId.append(data['sourceId'])

        for sourceId in list_sourceId:
            num = 0
            num = list_sourceId.count(sourceId)
            if num > 1:
                print(paging_number, sourceId, num)
                print("----------------------------分割线------------------------")

        for sourceId in list_sourceId:
            #
            # t = (sourceId in list_sourceId_old)
            # dict_souceId[sourceId] = t

            if sourceId in probation_plan_sourceId_list:
                n = n + 1
                print(n)
                print(sourceId, paging_number)




            #
            #
            # if dict_souceId.get(sourceId):
            #     if dict_souceId_number.get(sourceId):
            #         num = dict_souceId_number[sourceId] + 1
            #         dict_souceId_number[sourceId] = num
            #     else:
            #         dict_souceId_number[sourceId] = 1

        print("第{0}页获取绘本总个数{1}个--------".format(paging_number, data_len))
        # print(paging_number, dict_souceId)
        json_name = 'book2_otherCollectList' + str(paging_number) + '.json'
        with open(json_name , 'w') as json_file:
            json.dump(a_dict, json_file, ensure_ascii=False, indent=4)

    print("souceId比较结果：", dict_souceId)

    print("souceId出现次数：", dict_souceId_number)

    probation_plan_sourceId_list1 = [20818, 20819, 20820, 20821, 20823, 20824, 3715, 3714, 3683, 3684, 3661, 3662, 3644, 3646, 3613, 3577, 3614, 3544, 3576, 3543, 3445, 3446, 3425, 3426, 3393, 3394, 3337, 3336, 3379, 3349, 3378, 3368, 3369, 3315, 3288, 3347, 3277, 3278, 3732, 3316, 3764, 3289, 3765, 3731, 3568, 5811, 5937, 5769, 5768, 5765, 5882, 5812, 5936, 5901, 5881, 5821, 5973, 5971, 4836, 4837, 4864, 4863, 4862, 4861, 5709, 5711, 5710, 3370, 3371, 3382, 3383, 3397, 3421, 3447, 3398, 3448, 3469, 3422, 3467, 3631, 3632, 3630, 3629, 2422, 2425, 2427, 2426, 2428, 2430, 2431, 2432, 3964, 3965, 3966, 3967, 3968, 3969, 4029, 4024, 4025, 4035, 4027, 4033, 5400, 6791, 3225, 1368, 5389]

    n = 0

    # 随便看看 听书 数据

    paging_size = 60
    # paging_number = 1



    userId = hhdd_dict['userId']
    token = hhdd_dict['token']
    extTime = hhdd_dict['extTime']

    cookie_hhdd = "_HHDD_=\"{\\\"userId\\\":\\\"" + userId + "\\\",\\\"nick\\\":\\\"\\\",\\\"token\\\":\\\"" + token + "\\\",\\\"login\\\":\\\"true\\\",\\\"extTime\\\":\\\"" + extTime + "\\\"}\""
    # 'KaDa/3.6.0 (iPhone; iOS 11.3; Scale/3.00)',
    headers = {
        'user-agent': 'Dalvik/2.1.0(Linux; U; Android 5.1;OPPO A37m Build/LMY47I)',
        'rdi': "DT=OPPO A37m;SV=5.1;AV=3.7.3;CH=debugpackage",
        'Cookie': cookie_hhdd
    }

    for paging_number in range (1, 53):

        payload = {'pagingSize': paging_size, 'pagingNumber': paging_number}

        r = requests.get(url=url_story_n, headers=headers, params=payload)
        # print("随便听听---" + str(paging_number))
        # print(r.url)
        # print(r.cookies)
        # print(r.request.headers)
        # print(r.status_code)
        # print(r.text)
        # print("-------------------------------------------------")
        a_dict = r.json()
        data_len = len(a_dict['data'])
        # print("获取听书总个数：" + str(data_len))
        data_List = a_dict['data']
        list_sourceId = []

        for data in data_List:
            if data['type'] == 1:
                list_sourceId.append(data['data']['storyId'])


        for sourceId in list_sourceId:
            num = 0
            num = list_sourceId.count(sourceId)
            if num > 1:
                print(paging_number, sourceId, num)
                print("----------------------------分割线------------------------")

        for sourceId in list_sourceId:

            # t = (sourceId in list_sourceId_old)
            # dict_souceId[sourceId] = t

            if sourceId in probation_plan_sourceId_list1:
                n = n + 1
                print(n)
                print(sourceId, paging_number)

            # if dict_souceId.get(sourceId):
            #     if dict_souceId_number.get(sourceId):
            #         num = dict_souceId_number[sourceId] + 1
            #         dict_souceId_number[sourceId] = num
            #     else:
            #         dict_souceId_number[sourceId] = 1




        print("第{0}页获取听书总个数{1}个--------".format(paging_number, data_len))
        # json_name = 'tory2_getStoryList' + str(paging_number) + '.json'
        # with open(json_name, 'w') as json_file:
        #     json.dump(a_dict, json_file, ensure_ascii=False, indent=4)




if __name__ == '__main__':

    # "{\"userId\":6721145,\"nick\":null,\"token\":\"c06e491c0e8bc1b9c91f7fcf8775b401\",\"extTime\":1568272014340,\"login\":true}"
    # "{\"userId\":6721145,\"nick\":null,\"token\":\"830681cc6ea06b7fb1e82a06c6b3bea5\",\"extTime\":1568341135468,\"login\":true}"
    hhdd_dict = {'userId':'6721145', 'token':"830681cc6ea06b7fb1e82a06c6b3bea5", 'extTime':'1568341135468'}
    # hhdd_dict = {'userId':'60007172', 'token':'8643101b2b77512c75a0aedb91c353af', 'extTime':'1571281549940'}
    # 测试环境地址
    # htt = "http://10.0.10.61"

    # 预发布环境地址
    # htt = "http://pre2.service.hhdd.com"

    #正式环境地址
    htt = "https://service.hhdd.com"

    popup('0', hhdd_dict, htt)

    Get_User_Detail(hhdd_dict, htt)
    #
    Get_Client_Config(hhdd_dict, htt)

    # get_Login_Type(hhdd_dict)

    get_Story2_List(hhdd_dict, htt)
    getBook2List(hhdd_dict, htt)

    unsubscribe(hhdd_dict, htt)

    # get_Client_Config(hhdd_dict)

    # old_cookie = refreshToken()
    #
    # hhdd = "{userId:60002810,nick:null,token:35ffe4d5277412d5dc45fa5da391572b,extTime:1531277997571,login:true}"
    # hhdd_dict = getCookie(hhdd)
    #
    # #绑定微信
    # # 微信绑定前置接口
    #
    # # hhdd_dict['JSESSIONID'] = validateWechat(hhdd_dict, appid='wx8aa3c576a7fb1f13',
    # #                                          deviceId='6c8c01b8-766c-33e9-b2a5-915bccebe8ae',
    # #                                          code='001lEt2M06xOA42wkfZL0cut2M0lEt2I')
    # # doUnify('60002404')
    #
    # #绑定手机号码
    # hhdd_js = SMSCode('18505819201', 'unifyPhone')
    # hhdd_dict['JSESSIONID'] = hhdd_js
    # # 短信绑定前置接口
    # validatePhone(hhdd_dict, phone='18505819201', deviceId='d7beeee9-ca6b-3e71-9bf9-53fd5f017cc8', code='123456')
    # doUnify('60002810')

    # for index in range(1):
    #     url = "http://pre2.service.hhdd.com" + "/conf/getServiceIPList.json"
    #     r = requests.get(url)
    #     print(r.json())

    Get_Book_List(hhdd_dict, htt)

